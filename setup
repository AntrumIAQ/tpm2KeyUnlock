#!/usr/bin/env bash

if [ "${EUID}" -gt 0 ]; then
	echo "Run as root (with sudo, su, ssh, etc...)" >&2
	exit 1
fi

PACKAGES=( 'autoconf-archive' 'm4' 'libgcrypt20-dev' 'libjson-c-dev' 'uuid-dev' 'libcmocka0' 'libcmocka-dev' 'build-essential' 'git' 'pkg-config' 'gcc' 'g++' 'm4' 'libtool' 'automake' 'autoconf' 'libdbus-glib-1-dev' 'libssl-dev' 'cmake' 'libssl-dev' 'libcurl4-gnutls-dev' 'doxygen' 'efitools' 'tpm2-abrmd' 'tpm2-tools')

for pkg in "${PACKAGES[@]}";do
	if ! dpkg -l "${pkg}" | grep '^ii '; then
		if ! apt install -y "${pkg}"; then
			echo "Error installing ${pkg}" >&2
			exit 1
		fi
	fi
done

apt-get install -y glib2.0 || (echo "Could not install glib2.0"; exit 1)

chmod +x 42_tpm
cp 42_tpm /etc/grub.d/ || echo "GRUB not found."

cd /usr/local/src || exit 1
git clone https://github.com/tpm2-software/tpm2-tss.git

cd /usr/local/src/tpm2-tss || exit 1
./bootstrap
./configure --with-udevrulesdir=/etc/udev/rules.d
if make; then
	if ! make install; then
		echo "Unable to install tpm2-tss" >&2
		exit 1
	fi
else
	echo "Unable to build tpm2-tss" >&2
	exit 1
fi

if id tss;then
	echo "User rss already exists, please check user details"
else
	useradd --system --user-group tss
fi

source /etc/profile
for command in uuidgen openssl cert-to-efi-sig-list sign-efi-sig-list objcopy sbsign;do
	if ! command -v "${command}"; then
		echo "Unable to find ${command}, bailing out!" >&1
		exit 1
	fi
done

echo "Linux kernels seen:"
ls -ltr /boot/vmlinuz*

linux="$( ls -t /boot/vmlinuz* | head -n 1 )"
initrd="$( sed -e 's#vmlinuz#initrd\.img#g' <<< "${linux}" )"
if ! [ -e "${initrd}" ]; then
	echo -n "Unable to find InitRD guess of ${initrd}"
	initrd="$( ls -t /boot/initrd* | head -n 1  )"
	echo " using ${initrd} instead"
fi
echo -e "Installing for:\n\tkernel:\t${linux}\n\tInitRD:\t${initrd}"
cont=''
while [ "${cont}" != 'yes' ]; do
	echo 'Continue? Enter "yes" to continue or Ctrl+C to break.'
	read -p '>' cont
done
for file in /usr/lib/systemd/boot/efi/linuxx64.efi.stub /boot/efi/EFI/BOOT/BOOTX64.EFI /etc/os-release;do
	if [ ! -e "${file}" ];then
		echo -e "Unable to find ${file}." >&2
		exit 1
	fi
done

mkdir -p /usr/local/var/bootChain || exit 1
cd /usr/local/var/bootChain || exit 1

if [ ! -e GUID.txt ]; then
	uuidgen --random > GUID.txt
fi

#Create Platform Key
openssl req -newkey rsa:2048 -nodes -keyout PK.key -new -x509 -sha256 -days 3650 -subj "/CN=my Platform Key/" -out PK.crt
openssl x509 -outform DER -in PK.crt -out PK.cer
cert-to-efi-sig-list -g "$(< GUID.txt)" PK.crt PK.esl
sign-efi-sig-list -g "$(< GUID.txt)" -k PK.key -c PK.crt PK PK.esl PK.auth

#Create Key Exchange Key
openssl req -newkey rsa:2048 -nodes -keyout KEK.key -new -x509 -sha256 -days 3650 -subj "/CN=my Key Exchange Key/" -out KEK.crt
openssl x509 -outform DER -in KEK.crt -out KEK.cer
cert-to-efi-sig-list -g "$(< GUID.txt)" KEK.crt KEK.esl
sign-efi-sig-list -g "$(< GUID.txt)" -k PK.key -c PK.crt KEK KEK.esl KEK.auth

#Creating Signature Database Key
openssl req -newkey rsa:2048 -nodes -keyout db.key -new -x509 -sha256 -days 3650 -subj "/CN=my Signature Database key/" -out db.crt
openssl x509 -outform DER -in db.crt -out db.cer
cert-to-efi-sig-list -g "$(< GUID.txt)" db.crt db.esl
sign-efi-sig-list -g "$(< GUID.txt)" -k KEK.key -c KEK.crt db db.esl db.auth

cp db.auth /boot/efi/EFI/BOOT/
cp KEK.auth /boot/efi/EFI/BOOT/

mokutil --import db.cer KEK.cer

# Searches for LUKS drive, then removes PART UUID, and finally retrieves UUID
ROOT_DIR=$(blkid | grep LUKS |  grep -Po "(?<= UUID\=\")[a-z0-9-]+")

echo "root=$ROOT_DIR" > cmdline.txt


objcopy \
	--add-section .osrel=/etc/os-release --change-section-vma .osrel=0x20000 \
	--add-section .cmdline=cmdline.txt --change-section-vma .cmdline=0x30000 \
	--add-section .linux="${linux}" --change-section-vma .linux=0x40000 \
	--add-section .initrd="${initrd}" --change-section-vma .initrd=0x3000000 \
	/usr/lib/systemd/boot/efi/linuxx64.efi.stub /boot/efi/EFI/BOOT/BOOTX64.EFI
sbsign --key db.key --cert db.crt --output /boot/efi/EFI/BOOT/BOOTX64.EFI /boot/efi/EFI/BOOT/BOOTX64.EFI

objcopy \
	--add-section .osrel=/etc/os-release --change-section-vma .osrel=0x20000 \
	--add-section .cmdline=cmdline.txt --change-section-vma .cmdline=0x30000 \
	--add-section .linux="${linux}" --change-section-vma .linux=0x40000 \
	--add-section .initrd="${initrd}" --change-section-vma .initrd=0x3000000 \
	/usr/lib/systemd/boot/efi/linuxx64.efi.stub /boot/efi/EFI/BOOT/BOOT_RECX64.EFI

sbsign --key db.key --cert db.crt --output /boot/efi/EFI/BOOT/BOOT_RECX64.EFI /boot/efi/EFI/BOOT/BOOT_RECX64.EFI

if  cd /etc/grub.d/; then
	sed -i "s/GRUB_DEFAULT=\"0\"/GRUB_DEFAULT=\"TPM\"/g" /etc/default/grub
	update-grub
else
	(echo "Could not edit GRUB. You may have to manually add the TPM file to your bootloader.")
fi

echo "TPM2 boot enabled, please restart. If you have GRUB, there will be a menu entry." >> /var/run/reboot-required
cat /var/run/reboot-required

